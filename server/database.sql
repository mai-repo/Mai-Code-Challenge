CREATE DATABASE codeChallenge;
\c codeChallenge; -- Connect to the database

-- USERS table
CREATE TABLE IF NOT EXISTS USERS (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);

-- QUESTIONS table
CREATE TABLE IF NOT EXISTS QUESTIONS (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES USERS(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    problem TEXT NOT NULL,
    submission_date DATE DEFAULT CURRENT_DATE,
    is_correct BOOLEAN DEFAULT FALSE
);

-- FAVORITES table
CREATE TABLE IF NOT EXISTS FAVORITES (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES USERS(id) ON DELETE CASCADE,
    favorite_problems INT REFERENCES QUESTIONS(id) on DELETE CASCADE,
);

-- COMPLETED table
CREATE TABLE IF NOT EXISTS COMPLETED (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES USERS(id) ON DELETE CASCADE,
    completed_problems INT REFERENCES QUESTIONS(id) on DELETE CASCADE,
);

-- REJECTED table
CREATE TABLE IF NOT EXISTS REJECTED (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES USERS(id) ON DELETE CASCADE,
    rejected_problems INT REFERENCES QUESTIONS(id) on DELETE CASCADE,
);

-- USER_QUESTION_STATUS table
CREATE TABLE IF NOT EXISTS USER_QUESTION_STATUS (
    id SERIAL PRIMARY KEY,
    user_id INT NOT NULL REFERENCES USERS(id) ON DELETE CASCADE,
    question_id INT NOT NULL REFERENCES QUESTIONS(id) ON DELETE CASCADE,
    status VARCHAR(20) NOT NULL CHECK (status IN ('COMPLETED', 'REJECTED')),
);
